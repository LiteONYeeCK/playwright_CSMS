name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm            # <- speeds up npm ci
      - run: npm ci

      # 1. Cache browser binaries
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      # 2. Install only Chromium (skip Firefox/WebKit) if cache miss
      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      # 3. (Re-)install OS deps only when cache hit
      - name: Install OS dependencies (cache hit)
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium

      - name: Run Playwright tests
        run: npx playwright test

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - name: Prepare env variables
        if: always()
        run: |
          echo "REPORT_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
          echo "STATUS=${{ steps.tests.outcome }}" >> $GITHUB_ENV

      - name: Create Jira issue + CSV on failure
        if: steps.tests.outcome == 'failure'
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT: "YOURPROJKEY"       # <--- change me
        run: |
          npm install axios handlebars
          node scripts/create-jira-issue.js

      - name: Send e-mail notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USER }}
          password: ${{ secrets.MAIL_PASS }}
          from: GitHub Actions <${{ secrets.MAIL_USER }}>
          to: liteonsgyeeck@gmail.com
          subject: "Playwright run ${{ env.STATUS }} on ${{ github.repository }}"
          html_body: |
            <p>Repository: <strong>${{ github.repository }}</strong></p>
            <p>Branch: <strong>${{ github.ref_name }}</strong></p>
            <p>Status: <strong style="color:${{ env.STATUS == 'success' && 'green' || 'red' }}">${{ env.STATUS }}</strong></p>
            <p>Report: <a href="${{ env.REPORT_URL }}">${{ env.REPORT_URL }}</a></p>
            ${{ env.STATUS == 'failure' && '<p>A new Jira Task has been created.</p>' || '' }}
      # - name: Send e-mail (with Handlebars template)
      #   if: always()
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 465
      #     username: ${{ secrets.MAIL_USER }}
      #     password: ${{ secrets.MAIL_PASS }}
      #     from: GitHub Actions <${{ secrets.MAIL_USER }}>
      #     to: liteonsgyeeck@gmail.com
      #     subject: "Playwright run ${{ env.STATUS }} on ${{ github.repository }}"
      #     html_body: file://scripts/email-template.hbs
      #     convert_markdown: false
env:
  JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
  JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
  JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
  JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}